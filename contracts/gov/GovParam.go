// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gov

import (
	"math/big"
	"strings"

	"github.com/klaytn/klaytn"
	"github.com/klaytn/klaytn/accounts/abi"
	"github.com/klaytn/klaytn/accounts/abi/bind"
	"github.com/klaytn/klaytn/blockchain/types"
	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = klaytn.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IGovParamParam is an auto generated low-level Go binding around an user-defined struct.
type IGovParamParam struct {
	Activation uint64
	Votable    bool
	Prev       IGovParamParamState
	Next       IGovParamParamState
}

// IGovParamParamState is an auto generated low-level Go binding around an user-defined struct.
type IGovParamParamState struct {
	Value  []byte
	Exists bool
}

// ContextABI is the input ABI used to generate the binding from.
const ContextABI = "[]"

// ContextBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ContextBinRuntime = ``

// Context is an auto generated Go binding around a Klaytn contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around a Klaytn contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around a Klaytn contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around a Klaytn contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// GovParamABI is the input ABI used to generate the binding from.
const GovParamABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"AddParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DeleteParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"SetParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"SetParamVotable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"addParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"deleteParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStructParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"activation\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"votable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"next\",\"type\":\"tuple\"}],\"internalType\":\"structIGovParam.Param[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getParam\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paramExistingNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paramNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"params\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"activation\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"votable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"next\",\"type\":\"tuple\"}],\"internalType\":\"structIGovParam.Param\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"activation\",\"type\":\"uint64\"}],\"name\":\"setParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"votable\",\"type\":\"bool\"}],\"name\":\"setParamVotable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// GovParamBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const GovParamBinRuntime = `608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c57806399cb2e111161006657806399cb2e11146101a6578063a170052e146101ae578063ede7d2b4146101c4578063f2fde38b146101d757600080fd5b8063715018a6146101705780638841067a146101785780638da5cb5b1461018b57600080fd5b80630a6281fc146100d45780630df2cc04146100f3578063145f822b146101085780631ba1220d1461012857806342a3f7591461013d5780635d4f71d414610150575b600080fd5b6100dc6101ea565b6040516100ea92919061134d565b60405180910390f35b6100fb6102b8565b6040516100ea91906113bf565b61011b61011636600461147b565b6103f5565b6040516100ea91906114b7565b61013b610136366004611512565b6105c2565b005b61013b61014b366004611553565b610766565b61016361015e36600461147b565b61082f565b6040516100ea91906115a9565b61013b610862565b61013b6101863660046115bc565b610876565b6000546040516001600160a01b0390911681526020016100ea565b6100fb610a6d565b6101b6610b46565b6040516100ea929190611645565b61013b6101d23660046116a8565b610c08565b61013b6101e5366004611713565b610e14565b60608060006101f7610a6d565b9050600081516001600160401b03811115610214576102146113d9565b60405190808252806020026020018201604052801561024d57816020015b61023a611039565b8152602001906001900390816102325790505b50905060005b82518110156102ae5761027e8382815181106102715761027161173c565b60200260200101516103f5565b8282815181106102905761029061173c565b602002602001018190525080806102a690611768565b915050610253565b5090939092509050565b606060006102c4610a6d565b90506000805b825181101561031a576102f58382815181106102e8576102e861173c565b6020026020010151610e8d565b15610308578161030481611768565b9250505b8061031281611768565b9150506102ca565b506000816001600160401b03811115610335576103356113d9565b60405190808252806020026020018201604052801561036857816020015b60608152602001906001900390816103535790505b5090506000915060005b83518110156103ed576103908482815181106102e8576102e861173c565b156103db578381815181106103a7576103a761173c565b60200260200101518284815181106103c1576103c161173c565b602002602001018190525082806103d790611768565b9350505b806103e581611768565b915050610372565b509392505050565b6103fd611039565b60028260405161040d9190611781565b908152604080516020928190038301812060808201835280546001600160401b0381168352600160401b900460ff1615159382019390935281518083018352600184018054929493850192829082906104659061179d565b80601f01602080910402602001604051908101604052809291908181526020018280546104919061179d565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b505050505081526020016001820160009054906101000a900460ff1615151515815250508152602001600382016040518060400160405290816000820180546105269061179d565b80601f01602080910402602001604051908101604052809291908181526020018280546105529061179d565b801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001919091015460ff16151560209091015290525092915050565b6105ca610ea2565b806105f05760405162461bcd60e51b81526004016105e7906117d7565b60405180910390fd5b61062f82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b61064b5760405162461bcd60e51b81526004016105e79061180e565b61068a82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b60006002838360405161069e929190611850565b9081526040805191829003602090810183209083019182905260009283905260030192506106ce91839190611090565b506001808201805460ff191690556106e7904390611860565b600284846040516106f9929190611850565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557fb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe579061075990859085906118a1565b60405180910390a1505050565b61076e610ea2565b600082511161078f5760405162461bcd60e51b81526004016105e7906117d7565b61079882610e8d565b6107b45760405162461bcd60e51b81526004016105e79061180e565b806002836040516107c59190611781565b9081526040519081900360200181208054921515600160401b0268ff000000000000000019909316929092179091557f064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f59061082390849084906118b5565b60405180910390a15050565b606061083a82610e8d565b61085257505060408051602081019091526000815290565b61085b82610f95565b5192915050565b61086a610ea2565b6108746000610fe9565b565b61087e610ea2565b8361089b5760405162461bcd60e51b81526004016105e7906117d7565b6108da85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b6108f65760405162461bcd60e51b81526004016105e79061180e565b43816001600160401b03161161095f5760405162461bcd60e51b815260206004820152602860248201527f476f76506172616d3a2061637469766174696f6e206d75737420626520696e20604482015267612066757475726560c01b60648201526084016105e7565b61099e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b6000600286866040516109b2929190611850565b90815260405190819003602001902060030190506109d1818585611114565b506001818101805460ff1916909117905560405182906002906109f79089908990611850565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557ff8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c5690610a5d90889088908890889088906118d9565b60405180910390a1505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610b3d578382906000526020600020018054610ab09061179d565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc9061179d565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b505050505081526020019060010190610a91565b50505050905090565b6060806000610b536102b8565b9050600081516001600160401b03811115610b7057610b706113d9565b604051908082528060200260200182016040528015610ba357816020015b6060815260200190600190039081610b8e5790505b50905060005b82518110156102ae57610bd4838281518110610bc757610bc761173c565b6020026020010151610f95565b60000151828281518110610bea57610bea61173c565b60200260200101819052508080610c0090611768565b915050610ba9565b610c10610ea2565b82610c2d5760405162461bcd60e51b81526004016105e7906117d7565b610c6c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b15610cc45760405162461bcd60e51b815260206004820152602260248201527f476f76506172616d3a20706172616d6574657220616c72656164792065786973604482015261747360f01b60648201526084016105e7565b610d0384848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b600060028585604051610d17929190611850565b9081526040519081900360200190206003019050610d36818484611114565b506001818101805460ff191682179055610d51904390611860565b60028686604051610d63929190611850565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff19909216919091179055600180548082018255600091909152610dcf907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018686611114565b507f83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f7285858585604051610e05949392919061191c565b60405180910390a15050505050565b610e1c610ea2565b6001600160a01b038116610e815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e7565b610e8a81610fe9565b50565b6000610e9882610f95565b6020015192915050565b6000546001600160a01b031633146108745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e7565b610f05816103f5565b516001600160401b03164310610e8a57600281604051610f259190611781565b9081526020016040518091039020600301600282604051610f469190611781565b90815260200160405180910390206001016000820181600001908054610f6b9061179d565b610f76929190611188565b506001918201549101805460ff191660ff909216151591909117905550565b604080518082019091526060815260006020820152610fb3826103f5565b516001600160401b03164310610fd657610fcc826103f5565b6060015192915050565b610fdf826103f5565b6040015192915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051608081018252600080825260208083018290528351808501855260608152908101919091529091820190815260200161108b6040518060400160405280606081526020016000151581525090565b905290565b82805461109c9061179d565b90600052602060002090601f0160209004810192826110be5760008555611104565b82601f106110d757805160ff1916838001178555611104565b82800160010185558215611104579182015b828111156111045782518255916020019190600101906110e9565b50611110929150611203565b5090565b8280546111209061179d565b90600052602060002090601f0160209004810192826111425760008555611104565b82601f1061115b5782800160ff19823516178555611104565b82800160010185558215611104579182015b8281111561110457823582559160200191906001019061116d565b8280546111949061179d565b90600052602060002090601f0160209004810192826111b65760008555611104565b82601f106111c75780548555611104565b8280016001018555821561110457600052602060002091601f016020900482015b828111156111045782548255916001019190600101906111e8565b5b808211156111105760008155600101611204565b60005b8381101561123357818101518382015260200161121b565b83811115611242576000848401525b50505050565b60008151808452611260816020860160208601611218565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156112bf57601f198684030189526112ad838351611248565b98840198925090830190600101611291565b5090979650505050505050565b60008151604084526112e16040850182611248565b6020938401511515949093019390935250919050565b6001600160401b038151168252602081015115156020830152600060408201516080604085015261132b60808501826112cc565b90506060830151848203606086015261134482826112cc565b95945050505050565b6040815260006113606040830185611274565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156113b057601f1987840301855261139e8383516112f7565b94860194925090850190600101611382565b50909998505050505050505050565b6020815260006113d26020830184611274565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261140057600080fd5b81356001600160401b038082111561141a5761141a6113d9565b604051601f8301601f19908116603f01168101908282118183101715611442576114426113d9565b8160405283815286602085880101111561145b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561148d57600080fd5b81356001600160401b038111156114a357600080fd5b6114af848285016113ef565b949350505050565b6020815260006113d260208301846112f7565b60008083601f8401126114dc57600080fd5b5081356001600160401b038111156114f357600080fd5b60208301915083602082850101111561150b57600080fd5b9250929050565b6000806020838503121561152557600080fd5b82356001600160401b0381111561153b57600080fd5b611547858286016114ca565b90969095509350505050565b6000806040838503121561156657600080fd5b82356001600160401b0381111561157c57600080fd5b611588858286016113ef565b9250506020830135801515811461159e57600080fd5b809150509250929050565b6020815260006113d26020830184611248565b6000806000806000606086880312156115d457600080fd5b85356001600160401b03808211156115eb57600080fd5b6115f789838a016114ca565b9097509550602088013591508082111561161057600080fd5b61161c89838a016114ca565b909550935060408801359150808216821461163657600080fd5b50809150509295509295909350565b6040815260006116586040830185611274565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156113b057601f19878403018552611696838351611248565b9486019492509085019060010161167a565b600080600080604085870312156116be57600080fd5b84356001600160401b03808211156116d557600080fd5b6116e1888389016114ca565b909650945060208701359150808211156116fa57600080fd5b50611707878288016114ca565b95989497509550505050565b60006020828403121561172557600080fd5b81356001600160a01b03811681146113d257600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161177a5761177a611752565b5060010190565b60008251611793818460208701611218565b9190910192915050565b600181811c908216806117b157607f821691505b6020821081036117d157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601e908201527f476f76506172616d3a206e616d652063616e6e6f7420626520656d7074790000604082015260600190565b60208082526022908201527f476f76506172616d3a20706172616d6574657220646f6573206e6f74206578696040820152611cdd60f21b606082015260800190565b8183823760009101908152919050565b6000821982111561187357611873611752565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006114af602083018486611878565b6040815260006118c86040830185611248565b905082151560208301529392505050565b6060815260006118ed606083018789611878565b8281036020840152611900818688611878565b9150506001600160401b03831660408301529695505050505050565b604081526000611930604083018688611878565b8281036020840152611943818587611878565b97965050505050505056fea26469706673582212205840489f5b9ef7bc1d8dfe2ac33f80aa14ff83f8f0d506fc5ef1dc3a9e5c999764736f6c634300080d0033`

// GovParamFuncSigs maps the 4-byte function signature to its string representation.
var GovParamFuncSigs = map[string]string{
	"ede7d2b4": "addParam(string,bytes)",
	"1ba1220d": "deleteParam(string)",
	"a170052e": "getAllParams()",
	"0a6281fc": "getAllStructParams()",
	"5d4f71d4": "getParam(string)",
	"8da5cb5b": "owner()",
	"0df2cc04": "paramExistingNames()",
	"99cb2e11": "paramNames()",
	"145f822b": "params(string)",
	"715018a6": "renounceOwnership()",
	"8841067a": "setParam(string,bytes,uint64)",
	"42a3f759": "setParamVotable(string,bool)",
	"f2fde38b": "transferOwnership(address)",
}

// GovParamBin is the compiled bytecode used for deploying new contracts.
var GovParamBin = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6119848061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c57806399cb2e111161006657806399cb2e11146101a6578063a170052e146101ae578063ede7d2b4146101c4578063f2fde38b146101d757600080fd5b8063715018a6146101705780638841067a146101785780638da5cb5b1461018b57600080fd5b80630a6281fc146100d45780630df2cc04146100f3578063145f822b146101085780631ba1220d1461012857806342a3f7591461013d5780635d4f71d414610150575b600080fd5b6100dc6101ea565b6040516100ea92919061134d565b60405180910390f35b6100fb6102b8565b6040516100ea91906113bf565b61011b61011636600461147b565b6103f5565b6040516100ea91906114b7565b61013b610136366004611512565b6105c2565b005b61013b61014b366004611553565b610766565b61016361015e36600461147b565b61082f565b6040516100ea91906115a9565b61013b610862565b61013b6101863660046115bc565b610876565b6000546040516001600160a01b0390911681526020016100ea565b6100fb610a6d565b6101b6610b46565b6040516100ea929190611645565b61013b6101d23660046116a8565b610c08565b61013b6101e5366004611713565b610e14565b60608060006101f7610a6d565b9050600081516001600160401b03811115610214576102146113d9565b60405190808252806020026020018201604052801561024d57816020015b61023a611039565b8152602001906001900390816102325790505b50905060005b82518110156102ae5761027e8382815181106102715761027161173c565b60200260200101516103f5565b8282815181106102905761029061173c565b602002602001018190525080806102a690611768565b915050610253565b5090939092509050565b606060006102c4610a6d565b90506000805b825181101561031a576102f58382815181106102e8576102e861173c565b6020026020010151610e8d565b15610308578161030481611768565b9250505b8061031281611768565b9150506102ca565b506000816001600160401b03811115610335576103356113d9565b60405190808252806020026020018201604052801561036857816020015b60608152602001906001900390816103535790505b5090506000915060005b83518110156103ed576103908482815181106102e8576102e861173c565b156103db578381815181106103a7576103a761173c565b60200260200101518284815181106103c1576103c161173c565b602002602001018190525082806103d790611768565b9350505b806103e581611768565b915050610372565b509392505050565b6103fd611039565b60028260405161040d9190611781565b908152604080516020928190038301812060808201835280546001600160401b0381168352600160401b900460ff1615159382019390935281518083018352600184018054929493850192829082906104659061179d565b80601f01602080910402602001604051908101604052809291908181526020018280546104919061179d565b80156104de5780601f106104b3576101008083540402835291602001916104de565b820191906000526020600020905b8154815290600101906020018083116104c157829003601f168201915b505050505081526020016001820160009054906101000a900460ff1615151515815250508152602001600382016040518060400160405290816000820180546105269061179d565b80601f01602080910402602001604051908101604052809291908181526020018280546105529061179d565b801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001919091015460ff16151560209091015290525092915050565b6105ca610ea2565b806105f05760405162461bcd60e51b81526004016105e7906117d7565b60405180910390fd5b61062f82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b61064b5760405162461bcd60e51b81526004016105e79061180e565b61068a82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b60006002838360405161069e929190611850565b9081526040805191829003602090810183209083019182905260009283905260030192506106ce91839190611090565b506001808201805460ff191690556106e7904390611860565b600284846040516106f9929190611850565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557fb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe579061075990859085906118a1565b60405180910390a1505050565b61076e610ea2565b600082511161078f5760405162461bcd60e51b81526004016105e7906117d7565b61079882610e8d565b6107b45760405162461bcd60e51b81526004016105e79061180e565b806002836040516107c59190611781565b9081526040519081900360200181208054921515600160401b0268ff000000000000000019909316929092179091557f064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f59061082390849084906118b5565b60405180910390a15050565b606061083a82610e8d565b61085257505060408051602081019091526000815290565b61085b82610f95565b5192915050565b61086a610ea2565b6108746000610fe9565b565b61087e610ea2565b8361089b5760405162461bcd60e51b81526004016105e7906117d7565b6108da85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b6108f65760405162461bcd60e51b81526004016105e79061180e565b43816001600160401b03161161095f5760405162461bcd60e51b815260206004820152602860248201527f476f76506172616d3a2061637469766174696f6e206d75737420626520696e20604482015267612066757475726560c01b60648201526084016105e7565b61099e85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b6000600286866040516109b2929190611850565b90815260405190819003602001902060030190506109d1818585611114565b506001818101805460ff1916909117905560405182906002906109f79089908990611850565b90815260405190819003602001812080546001600160401b039390931667ffffffffffffffff19909316929092179091557ff8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c5690610a5d90889088908890889088906118d9565b60405180910390a1505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610b3d578382906000526020600020018054610ab09061179d565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc9061179d565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b505050505081526020019060010190610a91565b50505050905090565b6060806000610b536102b8565b9050600081516001600160401b03811115610b7057610b706113d9565b604051908082528060200260200182016040528015610ba357816020015b6060815260200190600190039081610b8e5790505b50905060005b82518110156102ae57610bd4838281518110610bc757610bc761173c565b6020026020010151610f95565b60000151828281518110610bea57610bea61173c565b60200260200101819052508080610c0090611768565b915050610ba9565b610c10610ea2565b82610c2d5760405162461bcd60e51b81526004016105e7906117d7565b610c6c84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b15610cc45760405162461bcd60e51b815260206004820152602260248201527f476f76506172616d3a20706172616d6574657220616c72656164792065786973604482015261747360f01b60648201526084016105e7565b610d0384848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610efc92505050565b600060028585604051610d17929190611850565b9081526040519081900360200190206003019050610d36818484611114565b506001818101805460ff191682179055610d51904390611860565b60028686604051610d63929190611850565b90815260405190819003602001902080546001600160401b039290921667ffffffffffffffff19909216919091179055600180548082018255600091909152610dcf907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018686611114565b507f83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f7285858585604051610e05949392919061191c565b60405180910390a15050505050565b610e1c610ea2565b6001600160a01b038116610e815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e7565b610e8a81610fe9565b50565b6000610e9882610f95565b6020015192915050565b6000546001600160a01b031633146108745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e7565b610f05816103f5565b516001600160401b03164310610e8a57600281604051610f259190611781565b9081526020016040518091039020600301600282604051610f469190611781565b90815260200160405180910390206001016000820181600001908054610f6b9061179d565b610f76929190611188565b506001918201549101805460ff191660ff909216151591909117905550565b604080518082019091526060815260006020820152610fb3826103f5565b516001600160401b03164310610fd657610fcc826103f5565b6060015192915050565b610fdf826103f5565b6040015192915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051608081018252600080825260208083018290528351808501855260608152908101919091529091820190815260200161108b6040518060400160405280606081526020016000151581525090565b905290565b82805461109c9061179d565b90600052602060002090601f0160209004810192826110be5760008555611104565b82601f106110d757805160ff1916838001178555611104565b82800160010185558215611104579182015b828111156111045782518255916020019190600101906110e9565b50611110929150611203565b5090565b8280546111209061179d565b90600052602060002090601f0160209004810192826111425760008555611104565b82601f1061115b5782800160ff19823516178555611104565b82800160010185558215611104579182015b8281111561110457823582559160200191906001019061116d565b8280546111949061179d565b90600052602060002090601f0160209004810192826111b65760008555611104565b82601f106111c75780548555611104565b8280016001018555821561110457600052602060002091601f016020900482015b828111156111045782548255916001019190600101906111e8565b5b808211156111105760008155600101611204565b60005b8381101561123357818101518382015260200161121b565b83811115611242576000848401525b50505050565b60008151808452611260816020860160208601611218565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156112bf57601f198684030189526112ad838351611248565b98840198925090830190600101611291565b5090979650505050505050565b60008151604084526112e16040850182611248565b6020938401511515949093019390935250919050565b6001600160401b038151168252602081015115156020830152600060408201516080604085015261132b60808501826112cc565b90506060830151848203606086015261134482826112cc565b95945050505050565b6040815260006113606040830185611274565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156113b057601f1987840301855261139e8383516112f7565b94860194925090850190600101611382565b50909998505050505050505050565b6020815260006113d26020830184611274565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261140057600080fd5b81356001600160401b038082111561141a5761141a6113d9565b604051601f8301601f19908116603f01168101908282118183101715611442576114426113d9565b8160405283815286602085880101111561145b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561148d57600080fd5b81356001600160401b038111156114a357600080fd5b6114af848285016113ef565b949350505050565b6020815260006113d260208301846112f7565b60008083601f8401126114dc57600080fd5b5081356001600160401b038111156114f357600080fd5b60208301915083602082850101111561150b57600080fd5b9250929050565b6000806020838503121561152557600080fd5b82356001600160401b0381111561153b57600080fd5b611547858286016114ca565b90969095509350505050565b6000806040838503121561156657600080fd5b82356001600160401b0381111561157c57600080fd5b611588858286016113ef565b9250506020830135801515811461159e57600080fd5b809150509250929050565b6020815260006113d26020830184611248565b6000806000806000606086880312156115d457600080fd5b85356001600160401b03808211156115eb57600080fd5b6115f789838a016114ca565b9097509550602088013591508082111561161057600080fd5b61161c89838a016114ca565b909550935060408801359150808216821461163657600080fd5b50809150509295509295909350565b6040815260006116586040830185611274565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156113b057601f19878403018552611696838351611248565b9486019492509085019060010161167a565b600080600080604085870312156116be57600080fd5b84356001600160401b03808211156116d557600080fd5b6116e1888389016114ca565b909650945060208701359150808211156116fa57600080fd5b50611707878288016114ca565b95989497509550505050565b60006020828403121561172557600080fd5b81356001600160a01b03811681146113d257600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161177a5761177a611752565b5060010190565b60008251611793818460208701611218565b9190910192915050565b600181811c908216806117b157607f821691505b6020821081036117d157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601e908201527f476f76506172616d3a206e616d652063616e6e6f7420626520656d7074790000604082015260600190565b60208082526022908201527f476f76506172616d3a20706172616d6574657220646f6573206e6f74206578696040820152611cdd60f21b606082015260800190565b8183823760009101908152919050565b6000821982111561187357611873611752565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006114af602083018486611878565b6040815260006118c86040830185611248565b905082151560208301529392505050565b6060815260006118ed606083018789611878565b8281036020840152611900818688611878565b9150506001600160401b03831660408301529695505050505050565b604081526000611930604083018688611878565b8281036020840152611943818587611878565b97965050505050505056fea26469706673582212205840489f5b9ef7bc1d8dfe2ac33f80aa14ff83f8f0d506fc5ef1dc3a9e5c999764736f6c634300080d0033"

// DeployGovParam deploys a new Klaytn contract, binding an instance of GovParam to it.
func DeployGovParam(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GovParam, error) {
	parsed, err := abi.JSON(strings.NewReader(GovParamABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GovParamBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovParam{GovParamCaller: GovParamCaller{contract: contract}, GovParamTransactor: GovParamTransactor{contract: contract}, GovParamFilterer: GovParamFilterer{contract: contract}}, nil
}

// GovParam is an auto generated Go binding around a Klaytn contract.
type GovParam struct {
	GovParamCaller     // Read-only binding to the contract
	GovParamTransactor // Write-only binding to the contract
	GovParamFilterer   // Log filterer for contract events
}

// GovParamCaller is an auto generated read-only Go binding around a Klaytn contract.
type GovParamCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovParamTransactor is an auto generated write-only Go binding around a Klaytn contract.
type GovParamTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovParamFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type GovParamFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovParamSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type GovParamSession struct {
	Contract     *GovParam         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovParamCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type GovParamCallerSession struct {
	Contract *GovParamCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GovParamTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type GovParamTransactorSession struct {
	Contract     *GovParamTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovParamRaw is an auto generated low-level Go binding around a Klaytn contract.
type GovParamRaw struct {
	Contract *GovParam // Generic contract binding to access the raw methods on
}

// GovParamCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type GovParamCallerRaw struct {
	Contract *GovParamCaller // Generic read-only contract binding to access the raw methods on
}

// GovParamTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type GovParamTransactorRaw struct {
	Contract *GovParamTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovParam creates a new instance of GovParam, bound to a specific deployed contract.
func NewGovParam(address common.Address, backend bind.ContractBackend) (*GovParam, error) {
	contract, err := bindGovParam(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovParam{GovParamCaller: GovParamCaller{contract: contract}, GovParamTransactor: GovParamTransactor{contract: contract}, GovParamFilterer: GovParamFilterer{contract: contract}}, nil
}

// NewGovParamCaller creates a new read-only instance of GovParam, bound to a specific deployed contract.
func NewGovParamCaller(address common.Address, caller bind.ContractCaller) (*GovParamCaller, error) {
	contract, err := bindGovParam(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovParamCaller{contract: contract}, nil
}

// NewGovParamTransactor creates a new write-only instance of GovParam, bound to a specific deployed contract.
func NewGovParamTransactor(address common.Address, transactor bind.ContractTransactor) (*GovParamTransactor, error) {
	contract, err := bindGovParam(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovParamTransactor{contract: contract}, nil
}

// NewGovParamFilterer creates a new log filterer instance of GovParam, bound to a specific deployed contract.
func NewGovParamFilterer(address common.Address, filterer bind.ContractFilterer) (*GovParamFilterer, error) {
	contract, err := bindGovParam(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovParamFilterer{contract: contract}, nil
}

// bindGovParam binds a generic wrapper to an already deployed contract.
func bindGovParam(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovParamABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovParam *GovParamRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GovParam.Contract.GovParamCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovParam *GovParamRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovParam.Contract.GovParamTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovParam *GovParamRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovParam.Contract.GovParamTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovParam *GovParamCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GovParam.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovParam *GovParamTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovParam.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovParam *GovParamTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovParam.Contract.contract.Transact(opts, method, params...)
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_GovParam *GovParamCaller) GetAllParams(opts *bind.CallOpts) ([]string, [][]byte, error) {
	var (
		ret0 = new([]string)
		ret1 = new([][]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _GovParam.contract.Call(opts, out, "getAllParams")
	return *ret0, *ret1, err
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_GovParam *GovParamSession) GetAllParams() ([]string, [][]byte, error) {
	return _GovParam.Contract.GetAllParams(&_GovParam.CallOpts)
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_GovParam *GovParamCallerSession) GetAllParams() ([]string, [][]byte, error) {
	return _GovParam.Contract.GetAllParams(&_GovParam.CallOpts)
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_GovParam *GovParamCaller) GetAllStructParams(opts *bind.CallOpts) ([]string, []IGovParamParam, error) {
	var (
		ret0 = new([]string)
		ret1 = new([]IGovParamParam)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _GovParam.contract.Call(opts, out, "getAllStructParams")
	return *ret0, *ret1, err
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_GovParam *GovParamSession) GetAllStructParams() ([]string, []IGovParamParam, error) {
	return _GovParam.Contract.GetAllStructParams(&_GovParam.CallOpts)
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_GovParam *GovParamCallerSession) GetAllStructParams() ([]string, []IGovParamParam, error) {
	return _GovParam.Contract.GetAllStructParams(&_GovParam.CallOpts)
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_GovParam *GovParamCaller) GetParam(opts *bind.CallOpts, name string) ([]byte, error) {
	ret0 := new([]byte)
	out := ret0
	err := _GovParam.contract.Call(opts, out, "getParam", name)
	return *ret0, err
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_GovParam *GovParamSession) GetParam(name string) ([]byte, error) {
	return _GovParam.Contract.GetParam(&_GovParam.CallOpts, name)
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_GovParam *GovParamCallerSession) GetParam(name string) ([]byte, error) {
	return _GovParam.Contract.GetParam(&_GovParam.CallOpts, name)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GovParam *GovParamCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret0 := new(common.Address)
	out := ret0
	err := _GovParam.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GovParam *GovParamSession) Owner() (common.Address, error) {
	return _GovParam.Contract.Owner(&_GovParam.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GovParam *GovParamCallerSession) Owner() (common.Address, error) {
	return _GovParam.Contract.Owner(&_GovParam.CallOpts)
}

// ParamExistingNames is a free data retrieval call binding the contract method 0x0df2cc04.
//
// Solidity: function paramExistingNames() view returns(string[])
func (_GovParam *GovParamCaller) ParamExistingNames(opts *bind.CallOpts) ([]string, error) {
	ret0 := new([]string)
	out := ret0
	err := _GovParam.contract.Call(opts, out, "paramExistingNames")
	return *ret0, err
}

// ParamExistingNames is a free data retrieval call binding the contract method 0x0df2cc04.
//
// Solidity: function paramExistingNames() view returns(string[])
func (_GovParam *GovParamSession) ParamExistingNames() ([]string, error) {
	return _GovParam.Contract.ParamExistingNames(&_GovParam.CallOpts)
}

// ParamExistingNames is a free data retrieval call binding the contract method 0x0df2cc04.
//
// Solidity: function paramExistingNames() view returns(string[])
func (_GovParam *GovParamCallerSession) ParamExistingNames() ([]string, error) {
	return _GovParam.Contract.ParamExistingNames(&_GovParam.CallOpts)
}

// ParamNames is a free data retrieval call binding the contract method 0x99cb2e11.
//
// Solidity: function paramNames() view returns(string[])
func (_GovParam *GovParamCaller) ParamNames(opts *bind.CallOpts) ([]string, error) {
	ret0 := new([]string)
	out := ret0
	err := _GovParam.contract.Call(opts, out, "paramNames")
	return *ret0, err
}

// ParamNames is a free data retrieval call binding the contract method 0x99cb2e11.
//
// Solidity: function paramNames() view returns(string[])
func (_GovParam *GovParamSession) ParamNames() ([]string, error) {
	return _GovParam.Contract.ParamNames(&_GovParam.CallOpts)
}

// ParamNames is a free data retrieval call binding the contract method 0x99cb2e11.
//
// Solidity: function paramNames() view returns(string[])
func (_GovParam *GovParamCallerSession) ParamNames() ([]string, error) {
	return _GovParam.Contract.ParamNames(&_GovParam.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0x145f822b.
//
// Solidity: function params(string name) view returns((uint64,bool,(bytes,bool),(bytes,bool)))
func (_GovParam *GovParamCaller) Params(opts *bind.CallOpts, name string) (IGovParamParam, error) {
	ret0 := new(IGovParamParam)
	out := ret0
	err := _GovParam.contract.Call(opts, out, "params", name)
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0x145f822b.
//
// Solidity: function params(string name) view returns((uint64,bool,(bytes,bool),(bytes,bool)))
func (_GovParam *GovParamSession) Params(name string) (IGovParamParam, error) {
	return _GovParam.Contract.Params(&_GovParam.CallOpts, name)
}

// Params is a free data retrieval call binding the contract method 0x145f822b.
//
// Solidity: function params(string name) view returns((uint64,bool,(bytes,bool),(bytes,bool)))
func (_GovParam *GovParamCallerSession) Params(name string) (IGovParamParam, error) {
	return _GovParam.Contract.Params(&_GovParam.CallOpts, name)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_GovParam *GovParamTransactor) AddParam(opts *bind.TransactOpts, name string, value []byte) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "addParam", name, value)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_GovParam *GovParamSession) AddParam(name string, value []byte) (*types.Transaction, error) {
	return _GovParam.Contract.AddParam(&_GovParam.TransactOpts, name, value)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_GovParam *GovParamTransactorSession) AddParam(name string, value []byte) (*types.Transaction, error) {
	return _GovParam.Contract.AddParam(&_GovParam.TransactOpts, name, value)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_GovParam *GovParamTransactor) DeleteParam(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "deleteParam", name)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_GovParam *GovParamSession) DeleteParam(name string) (*types.Transaction, error) {
	return _GovParam.Contract.DeleteParam(&_GovParam.TransactOpts, name)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_GovParam *GovParamTransactorSession) DeleteParam(name string) (*types.Transaction, error) {
	return _GovParam.Contract.DeleteParam(&_GovParam.TransactOpts, name)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GovParam *GovParamTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GovParam *GovParamSession) RenounceOwnership() (*types.Transaction, error) {
	return _GovParam.Contract.RenounceOwnership(&_GovParam.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GovParam *GovParamTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _GovParam.Contract.RenounceOwnership(&_GovParam.TransactOpts)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_GovParam *GovParamTransactor) SetParam(opts *bind.TransactOpts, name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "setParam", name, value, activation)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_GovParam *GovParamSession) SetParam(name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _GovParam.Contract.SetParam(&_GovParam.TransactOpts, name, value, activation)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_GovParam *GovParamTransactorSession) SetParam(name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _GovParam.Contract.SetParam(&_GovParam.TransactOpts, name, value, activation)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_GovParam *GovParamTransactor) SetParamVotable(opts *bind.TransactOpts, name string, votable bool) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "setParamVotable", name, votable)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_GovParam *GovParamSession) SetParamVotable(name string, votable bool) (*types.Transaction, error) {
	return _GovParam.Contract.SetParamVotable(&_GovParam.TransactOpts, name, votable)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_GovParam *GovParamTransactorSession) SetParamVotable(name string, votable bool) (*types.Transaction, error) {
	return _GovParam.Contract.SetParamVotable(&_GovParam.TransactOpts, name, votable)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GovParam *GovParamTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _GovParam.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GovParam *GovParamSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GovParam.Contract.TransferOwnership(&_GovParam.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GovParam *GovParamTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GovParam.Contract.TransferOwnership(&_GovParam.TransactOpts, newOwner)
}

// GovParamAddParamIterator is returned from FilterAddParam and is used to iterate over the raw logs and unpacked data for AddParam events raised by the GovParam contract.
type GovParamAddParamIterator struct {
	Event *GovParamAddParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovParamAddParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovParamAddParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovParamAddParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovParamAddParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovParamAddParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovParamAddParam represents a AddParam event raised by the GovParam contract.
type GovParamAddParam struct {
	Arg0 string
	Arg1 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddParam is a free log retrieval operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_GovParam *GovParamFilterer) FilterAddParam(opts *bind.FilterOpts) (*GovParamAddParamIterator, error) {
	logs, sub, err := _GovParam.contract.FilterLogs(opts, "AddParam")
	if err != nil {
		return nil, err
	}
	return &GovParamAddParamIterator{contract: _GovParam.contract, event: "AddParam", logs: logs, sub: sub}, nil
}

// WatchAddParam is a free log subscription operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_GovParam *GovParamFilterer) WatchAddParam(opts *bind.WatchOpts, sink chan<- *GovParamAddParam) (event.Subscription, error) {
	logs, sub, err := _GovParam.contract.WatchLogs(opts, "AddParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovParamAddParam)
				if err := _GovParam.contract.UnpackLog(event, "AddParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddParam is a log parse operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_GovParam *GovParamFilterer) ParseAddParam(log types.Log) (*GovParamAddParam, error) {
	event := new(GovParamAddParam)
	if err := _GovParam.contract.UnpackLog(event, "AddParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GovParamDeleteParamIterator is returned from FilterDeleteParam and is used to iterate over the raw logs and unpacked data for DeleteParam events raised by the GovParam contract.
type GovParamDeleteParamIterator struct {
	Event *GovParamDeleteParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovParamDeleteParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovParamDeleteParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovParamDeleteParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovParamDeleteParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovParamDeleteParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovParamDeleteParam represents a DeleteParam event raised by the GovParam contract.
type GovParamDeleteParam struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDeleteParam is a free log retrieval operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_GovParam *GovParamFilterer) FilterDeleteParam(opts *bind.FilterOpts) (*GovParamDeleteParamIterator, error) {
	logs, sub, err := _GovParam.contract.FilterLogs(opts, "DeleteParam")
	if err != nil {
		return nil, err
	}
	return &GovParamDeleteParamIterator{contract: _GovParam.contract, event: "DeleteParam", logs: logs, sub: sub}, nil
}

// WatchDeleteParam is a free log subscription operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_GovParam *GovParamFilterer) WatchDeleteParam(opts *bind.WatchOpts, sink chan<- *GovParamDeleteParam) (event.Subscription, error) {
	logs, sub, err := _GovParam.contract.WatchLogs(opts, "DeleteParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovParamDeleteParam)
				if err := _GovParam.contract.UnpackLog(event, "DeleteParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteParam is a log parse operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_GovParam *GovParamFilterer) ParseDeleteParam(log types.Log) (*GovParamDeleteParam, error) {
	event := new(GovParamDeleteParam)
	if err := _GovParam.contract.UnpackLog(event, "DeleteParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GovParamOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the GovParam contract.
type GovParamOwnershipTransferredIterator struct {
	Event *GovParamOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovParamOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovParamOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovParamOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovParamOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovParamOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovParamOwnershipTransferred represents a OwnershipTransferred event raised by the GovParam contract.
type GovParamOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GovParam *GovParamFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GovParamOwnershipTransferredIterator, error) {
	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GovParam.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GovParamOwnershipTransferredIterator{contract: _GovParam.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GovParam *GovParamFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GovParamOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {
	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GovParam.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovParamOwnershipTransferred)
				if err := _GovParam.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GovParam *GovParamFilterer) ParseOwnershipTransferred(log types.Log) (*GovParamOwnershipTransferred, error) {
	event := new(GovParamOwnershipTransferred)
	if err := _GovParam.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GovParamSetParamIterator is returned from FilterSetParam and is used to iterate over the raw logs and unpacked data for SetParam events raised by the GovParam contract.
type GovParamSetParamIterator struct {
	Event *GovParamSetParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovParamSetParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovParamSetParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovParamSetParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovParamSetParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovParamSetParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovParamSetParam represents a SetParam event raised by the GovParam contract.
type GovParamSetParam struct {
	Arg0 string
	Arg1 []byte
	Arg2 uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSetParam is a free log retrieval operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_GovParam *GovParamFilterer) FilterSetParam(opts *bind.FilterOpts) (*GovParamSetParamIterator, error) {
	logs, sub, err := _GovParam.contract.FilterLogs(opts, "SetParam")
	if err != nil {
		return nil, err
	}
	return &GovParamSetParamIterator{contract: _GovParam.contract, event: "SetParam", logs: logs, sub: sub}, nil
}

// WatchSetParam is a free log subscription operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_GovParam *GovParamFilterer) WatchSetParam(opts *bind.WatchOpts, sink chan<- *GovParamSetParam) (event.Subscription, error) {
	logs, sub, err := _GovParam.contract.WatchLogs(opts, "SetParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovParamSetParam)
				if err := _GovParam.contract.UnpackLog(event, "SetParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetParam is a log parse operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_GovParam *GovParamFilterer) ParseSetParam(log types.Log) (*GovParamSetParam, error) {
	event := new(GovParamSetParam)
	if err := _GovParam.contract.UnpackLog(event, "SetParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GovParamSetParamVotableIterator is returned from FilterSetParamVotable and is used to iterate over the raw logs and unpacked data for SetParamVotable events raised by the GovParam contract.
type GovParamSetParamVotableIterator struct {
	Event *GovParamSetParamVotable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovParamSetParamVotableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovParamSetParamVotable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovParamSetParamVotable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovParamSetParamVotableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovParamSetParamVotableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovParamSetParamVotable represents a SetParamVotable event raised by the GovParam contract.
type GovParamSetParamVotable struct {
	Arg0 string
	Arg1 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSetParamVotable is a free log retrieval operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_GovParam *GovParamFilterer) FilterSetParamVotable(opts *bind.FilterOpts) (*GovParamSetParamVotableIterator, error) {
	logs, sub, err := _GovParam.contract.FilterLogs(opts, "SetParamVotable")
	if err != nil {
		return nil, err
	}
	return &GovParamSetParamVotableIterator{contract: _GovParam.contract, event: "SetParamVotable", logs: logs, sub: sub}, nil
}

// WatchSetParamVotable is a free log subscription operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_GovParam *GovParamFilterer) WatchSetParamVotable(opts *bind.WatchOpts, sink chan<- *GovParamSetParamVotable) (event.Subscription, error) {
	logs, sub, err := _GovParam.contract.WatchLogs(opts, "SetParamVotable")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovParamSetParamVotable)
				if err := _GovParam.contract.UnpackLog(event, "SetParamVotable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetParamVotable is a log parse operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_GovParam *GovParamFilterer) ParseSetParamVotable(log types.Log) (*GovParamSetParamVotable, error) {
	event := new(GovParamSetParamVotable)
	if err := _GovParam.contract.UnpackLog(event, "SetParamVotable", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGovParamABI is the input ABI used to generate the binding from.
const IGovParamABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"AddParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"DeleteParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"SetParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"SetParamVotable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"addParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"deleteParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStructParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"activation\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"votable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structIGovParam.ParamState\",\"name\":\"next\",\"type\":\"tuple\"}],\"internalType\":\"structIGovParam.Param[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getParam\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"activation\",\"type\":\"uint64\"}],\"name\":\"setParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"votable\",\"type\":\"bool\"}],\"name\":\"setParamVotable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IGovParamBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IGovParamBinRuntime = ``

// IGovParamFuncSigs maps the 4-byte function signature to its string representation.
var IGovParamFuncSigs = map[string]string{
	"ede7d2b4": "addParam(string,bytes)",
	"1ba1220d": "deleteParam(string)",
	"a170052e": "getAllParams()",
	"0a6281fc": "getAllStructParams()",
	"5d4f71d4": "getParam(string)",
	"8841067a": "setParam(string,bytes,uint64)",
	"42a3f759": "setParamVotable(string,bool)",
}

// IGovParam is an auto generated Go binding around a Klaytn contract.
type IGovParam struct {
	IGovParamCaller     // Read-only binding to the contract
	IGovParamTransactor // Write-only binding to the contract
	IGovParamFilterer   // Log filterer for contract events
}

// IGovParamCaller is an auto generated read-only Go binding around a Klaytn contract.
type IGovParamCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovParamTransactor is an auto generated write-only Go binding around a Klaytn contract.
type IGovParamTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovParamFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type IGovParamFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovParamSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type IGovParamSession struct {
	Contract     *IGovParam        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IGovParamCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type IGovParamCallerSession struct {
	Contract *IGovParamCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IGovParamTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type IGovParamTransactorSession struct {
	Contract     *IGovParamTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IGovParamRaw is an auto generated low-level Go binding around a Klaytn contract.
type IGovParamRaw struct {
	Contract *IGovParam // Generic contract binding to access the raw methods on
}

// IGovParamCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type IGovParamCallerRaw struct {
	Contract *IGovParamCaller // Generic read-only contract binding to access the raw methods on
}

// IGovParamTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type IGovParamTransactorRaw struct {
	Contract *IGovParamTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIGovParam creates a new instance of IGovParam, bound to a specific deployed contract.
func NewIGovParam(address common.Address, backend bind.ContractBackend) (*IGovParam, error) {
	contract, err := bindIGovParam(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IGovParam{IGovParamCaller: IGovParamCaller{contract: contract}, IGovParamTransactor: IGovParamTransactor{contract: contract}, IGovParamFilterer: IGovParamFilterer{contract: contract}}, nil
}

// NewIGovParamCaller creates a new read-only instance of IGovParam, bound to a specific deployed contract.
func NewIGovParamCaller(address common.Address, caller bind.ContractCaller) (*IGovParamCaller, error) {
	contract, err := bindIGovParam(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IGovParamCaller{contract: contract}, nil
}

// NewIGovParamTransactor creates a new write-only instance of IGovParam, bound to a specific deployed contract.
func NewIGovParamTransactor(address common.Address, transactor bind.ContractTransactor) (*IGovParamTransactor, error) {
	contract, err := bindIGovParam(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IGovParamTransactor{contract: contract}, nil
}

// NewIGovParamFilterer creates a new log filterer instance of IGovParam, bound to a specific deployed contract.
func NewIGovParamFilterer(address common.Address, filterer bind.ContractFilterer) (*IGovParamFilterer, error) {
	contract, err := bindIGovParam(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IGovParamFilterer{contract: contract}, nil
}

// bindIGovParam binds a generic wrapper to an already deployed contract.
func bindIGovParam(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IGovParamABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovParam *IGovParamRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGovParam.Contract.IGovParamCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovParam *IGovParamRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovParam.Contract.IGovParamTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovParam *IGovParamRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovParam.Contract.IGovParamTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovParam *IGovParamCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGovParam.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovParam *IGovParamTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovParam.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovParam *IGovParamTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovParam.Contract.contract.Transact(opts, method, params...)
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_IGovParam *IGovParamCaller) GetAllParams(opts *bind.CallOpts) ([]string, [][]byte, error) {
	var (
		ret0 = new([]string)
		ret1 = new([][]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IGovParam.contract.Call(opts, out, "getAllParams")
	return *ret0, *ret1, err
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_IGovParam *IGovParamSession) GetAllParams() ([]string, [][]byte, error) {
	return _IGovParam.Contract.GetAllParams(&_IGovParam.CallOpts)
}

// GetAllParams is a free data retrieval call binding the contract method 0xa170052e.
//
// Solidity: function getAllParams() view returns(string[], bytes[])
func (_IGovParam *IGovParamCallerSession) GetAllParams() ([]string, [][]byte, error) {
	return _IGovParam.Contract.GetAllParams(&_IGovParam.CallOpts)
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_IGovParam *IGovParamCaller) GetAllStructParams(opts *bind.CallOpts) ([]string, []IGovParamParam, error) {
	var (
		ret0 = new([]string)
		ret1 = new([]IGovParamParam)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IGovParam.contract.Call(opts, out, "getAllStructParams")
	return *ret0, *ret1, err
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_IGovParam *IGovParamSession) GetAllStructParams() ([]string, []IGovParamParam, error) {
	return _IGovParam.Contract.GetAllStructParams(&_IGovParam.CallOpts)
}

// GetAllStructParams is a free data retrieval call binding the contract method 0x0a6281fc.
//
// Solidity: function getAllStructParams() view returns(string[], (uint64,bool,(bytes,bool),(bytes,bool))[])
func (_IGovParam *IGovParamCallerSession) GetAllStructParams() ([]string, []IGovParamParam, error) {
	return _IGovParam.Contract.GetAllStructParams(&_IGovParam.CallOpts)
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_IGovParam *IGovParamCaller) GetParam(opts *bind.CallOpts, name string) ([]byte, error) {
	ret0 := new([]byte)
	out := ret0
	err := _IGovParam.contract.Call(opts, out, "getParam", name)
	return *ret0, err
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_IGovParam *IGovParamSession) GetParam(name string) ([]byte, error) {
	return _IGovParam.Contract.GetParam(&_IGovParam.CallOpts, name)
}

// GetParam is a free data retrieval call binding the contract method 0x5d4f71d4.
//
// Solidity: function getParam(string name) view returns(bytes)
func (_IGovParam *IGovParamCallerSession) GetParam(name string) ([]byte, error) {
	return _IGovParam.Contract.GetParam(&_IGovParam.CallOpts, name)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_IGovParam *IGovParamTransactor) AddParam(opts *bind.TransactOpts, name string, value []byte) (*types.Transaction, error) {
	return _IGovParam.contract.Transact(opts, "addParam", name, value)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_IGovParam *IGovParamSession) AddParam(name string, value []byte) (*types.Transaction, error) {
	return _IGovParam.Contract.AddParam(&_IGovParam.TransactOpts, name, value)
}

// AddParam is a paid mutator transaction binding the contract method 0xede7d2b4.
//
// Solidity: function addParam(string name, bytes value) returns()
func (_IGovParam *IGovParamTransactorSession) AddParam(name string, value []byte) (*types.Transaction, error) {
	return _IGovParam.Contract.AddParam(&_IGovParam.TransactOpts, name, value)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_IGovParam *IGovParamTransactor) DeleteParam(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _IGovParam.contract.Transact(opts, "deleteParam", name)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_IGovParam *IGovParamSession) DeleteParam(name string) (*types.Transaction, error) {
	return _IGovParam.Contract.DeleteParam(&_IGovParam.TransactOpts, name)
}

// DeleteParam is a paid mutator transaction binding the contract method 0x1ba1220d.
//
// Solidity: function deleteParam(string name) returns()
func (_IGovParam *IGovParamTransactorSession) DeleteParam(name string) (*types.Transaction, error) {
	return _IGovParam.Contract.DeleteParam(&_IGovParam.TransactOpts, name)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_IGovParam *IGovParamTransactor) SetParam(opts *bind.TransactOpts, name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _IGovParam.contract.Transact(opts, "setParam", name, value, activation)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_IGovParam *IGovParamSession) SetParam(name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _IGovParam.Contract.SetParam(&_IGovParam.TransactOpts, name, value, activation)
}

// SetParam is a paid mutator transaction binding the contract method 0x8841067a.
//
// Solidity: function setParam(string name, bytes value, uint64 activation) returns()
func (_IGovParam *IGovParamTransactorSession) SetParam(name string, value []byte, activation uint64) (*types.Transaction, error) {
	return _IGovParam.Contract.SetParam(&_IGovParam.TransactOpts, name, value, activation)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_IGovParam *IGovParamTransactor) SetParamVotable(opts *bind.TransactOpts, name string, votable bool) (*types.Transaction, error) {
	return _IGovParam.contract.Transact(opts, "setParamVotable", name, votable)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_IGovParam *IGovParamSession) SetParamVotable(name string, votable bool) (*types.Transaction, error) {
	return _IGovParam.Contract.SetParamVotable(&_IGovParam.TransactOpts, name, votable)
}

// SetParamVotable is a paid mutator transaction binding the contract method 0x42a3f759.
//
// Solidity: function setParamVotable(string name, bool votable) returns()
func (_IGovParam *IGovParamTransactorSession) SetParamVotable(name string, votable bool) (*types.Transaction, error) {
	return _IGovParam.Contract.SetParamVotable(&_IGovParam.TransactOpts, name, votable)
}

// IGovParamAddParamIterator is returned from FilterAddParam and is used to iterate over the raw logs and unpacked data for AddParam events raised by the IGovParam contract.
type IGovParamAddParamIterator struct {
	Event *IGovParamAddParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGovParamAddParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGovParamAddParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGovParamAddParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGovParamAddParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGovParamAddParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGovParamAddParam represents a AddParam event raised by the IGovParam contract.
type IGovParamAddParam struct {
	Arg0 string
	Arg1 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddParam is a free log retrieval operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_IGovParam *IGovParamFilterer) FilterAddParam(opts *bind.FilterOpts) (*IGovParamAddParamIterator, error) {
	logs, sub, err := _IGovParam.contract.FilterLogs(opts, "AddParam")
	if err != nil {
		return nil, err
	}
	return &IGovParamAddParamIterator{contract: _IGovParam.contract, event: "AddParam", logs: logs, sub: sub}, nil
}

// WatchAddParam is a free log subscription operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_IGovParam *IGovParamFilterer) WatchAddParam(opts *bind.WatchOpts, sink chan<- *IGovParamAddParam) (event.Subscription, error) {
	logs, sub, err := _IGovParam.contract.WatchLogs(opts, "AddParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGovParamAddParam)
				if err := _IGovParam.contract.UnpackLog(event, "AddParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddParam is a log parse operation binding the contract event 0x83878da4b3d5b833aa14a193f9b57d482ab60c1e18ef91dce48f4584f85b8f72.
//
// Solidity: event AddParam(string arg0, bytes arg1)
func (_IGovParam *IGovParamFilterer) ParseAddParam(log types.Log) (*IGovParamAddParam, error) {
	event := new(IGovParamAddParam)
	if err := _IGovParam.contract.UnpackLog(event, "AddParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGovParamDeleteParamIterator is returned from FilterDeleteParam and is used to iterate over the raw logs and unpacked data for DeleteParam events raised by the IGovParam contract.
type IGovParamDeleteParamIterator struct {
	Event *IGovParamDeleteParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGovParamDeleteParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGovParamDeleteParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGovParamDeleteParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGovParamDeleteParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGovParamDeleteParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGovParamDeleteParam represents a DeleteParam event raised by the IGovParam contract.
type IGovParamDeleteParam struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDeleteParam is a free log retrieval operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_IGovParam *IGovParamFilterer) FilterDeleteParam(opts *bind.FilterOpts) (*IGovParamDeleteParamIterator, error) {
	logs, sub, err := _IGovParam.contract.FilterLogs(opts, "DeleteParam")
	if err != nil {
		return nil, err
	}
	return &IGovParamDeleteParamIterator{contract: _IGovParam.contract, event: "DeleteParam", logs: logs, sub: sub}, nil
}

// WatchDeleteParam is a free log subscription operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_IGovParam *IGovParamFilterer) WatchDeleteParam(opts *bind.WatchOpts, sink chan<- *IGovParamDeleteParam) (event.Subscription, error) {
	logs, sub, err := _IGovParam.contract.WatchLogs(opts, "DeleteParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGovParamDeleteParam)
				if err := _IGovParam.contract.UnpackLog(event, "DeleteParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteParam is a log parse operation binding the contract event 0xb888810dc5f09b858ca878b61b517f1a3925eb93a2051546d50021db9170fe57.
//
// Solidity: event DeleteParam(string arg0)
func (_IGovParam *IGovParamFilterer) ParseDeleteParam(log types.Log) (*IGovParamDeleteParam, error) {
	event := new(IGovParamDeleteParam)
	if err := _IGovParam.contract.UnpackLog(event, "DeleteParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGovParamSetParamIterator is returned from FilterSetParam and is used to iterate over the raw logs and unpacked data for SetParam events raised by the IGovParam contract.
type IGovParamSetParamIterator struct {
	Event *IGovParamSetParam // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGovParamSetParamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGovParamSetParam)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGovParamSetParam)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGovParamSetParamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGovParamSetParamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGovParamSetParam represents a SetParam event raised by the IGovParam contract.
type IGovParamSetParam struct {
	Arg0 string
	Arg1 []byte
	Arg2 uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSetParam is a free log retrieval operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_IGovParam *IGovParamFilterer) FilterSetParam(opts *bind.FilterOpts) (*IGovParamSetParamIterator, error) {
	logs, sub, err := _IGovParam.contract.FilterLogs(opts, "SetParam")
	if err != nil {
		return nil, err
	}
	return &IGovParamSetParamIterator{contract: _IGovParam.contract, event: "SetParam", logs: logs, sub: sub}, nil
}

// WatchSetParam is a free log subscription operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_IGovParam *IGovParamFilterer) WatchSetParam(opts *bind.WatchOpts, sink chan<- *IGovParamSetParam) (event.Subscription, error) {
	logs, sub, err := _IGovParam.contract.WatchLogs(opts, "SetParam")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGovParamSetParam)
				if err := _IGovParam.contract.UnpackLog(event, "SetParam", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetParam is a log parse operation binding the contract event 0xf8d4c4710beeb9d48e0bc6888dfcaf21467794f5da39c3bfb2874a2ac3a73c56.
//
// Solidity: event SetParam(string arg0, bytes arg1, uint64 arg2)
func (_IGovParam *IGovParamFilterer) ParseSetParam(log types.Log) (*IGovParamSetParam, error) {
	event := new(IGovParamSetParam)
	if err := _IGovParam.contract.UnpackLog(event, "SetParam", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGovParamSetParamVotableIterator is returned from FilterSetParamVotable and is used to iterate over the raw logs and unpacked data for SetParamVotable events raised by the IGovParam contract.
type IGovParamSetParamVotableIterator struct {
	Event *IGovParamSetParamVotable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGovParamSetParamVotableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGovParamSetParamVotable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGovParamSetParamVotable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGovParamSetParamVotableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGovParamSetParamVotableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGovParamSetParamVotable represents a SetParamVotable event raised by the IGovParam contract.
type IGovParamSetParamVotable struct {
	Arg0 string
	Arg1 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSetParamVotable is a free log retrieval operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_IGovParam *IGovParamFilterer) FilterSetParamVotable(opts *bind.FilterOpts) (*IGovParamSetParamVotableIterator, error) {
	logs, sub, err := _IGovParam.contract.FilterLogs(opts, "SetParamVotable")
	if err != nil {
		return nil, err
	}
	return &IGovParamSetParamVotableIterator{contract: _IGovParam.contract, event: "SetParamVotable", logs: logs, sub: sub}, nil
}

// WatchSetParamVotable is a free log subscription operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_IGovParam *IGovParamFilterer) WatchSetParamVotable(opts *bind.WatchOpts, sink chan<- *IGovParamSetParamVotable) (event.Subscription, error) {
	logs, sub, err := _IGovParam.contract.WatchLogs(opts, "SetParamVotable")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGovParamSetParamVotable)
				if err := _IGovParam.contract.UnpackLog(event, "SetParamVotable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetParamVotable is a log parse operation binding the contract event 0x064a476da825aa99a31c682cc490b34f462457006480bda5cb27151a201213f5.
//
// Solidity: event SetParamVotable(string arg0, bool arg1)
func (_IGovParam *IGovParamFilterer) ParseSetParamVotable(log types.Log) (*IGovParamSetParamVotable, error) {
	event := new(IGovParamSetParamVotable)
	if err := _IGovParam.contract.UnpackLog(event, "SetParamVotable", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// OwnableBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const OwnableBinRuntime = ``

// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = map[string]string{
	"8da5cb5b": "owner()",
	"715018a6": "renounceOwnership()",
	"f2fde38b": "transferOwnership(address)",
}

// Ownable is an auto generated Go binding around a Klaytn contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around a Klaytn contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around a Klaytn contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around a Klaytn contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around a Klaytn contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret0 := new(common.Address)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {
	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {
	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}
